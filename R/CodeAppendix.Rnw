\documentclass{article}

\usepackage{geometry}
\setlength{\parindent}{0pt}
\geometry{textwidth=15cm}

\usepackage{dcolumn}
\usepackage{apacite}
\usepackage{amsmath}
\usepackage{xcolor}
\usepackage{float}

\title{Appendix II}

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
\hrulefill
\vspace{0.5cm}

First we would like to show some functions which we will be using later.
<<General, echo=TRUE, eval=TRUE, keep.source=FALSE>>=
ihs <- function(x) {
    y <- log(x + sqrt(x ^ 2 + 1))
    return(y)
}# Alternative Box Cox Transformation

panel_unstack = function(stackeddata, tstep=NULL) {
  # stackeddata is a stacked data frame/matrix ordered in the following way
  #               Variable1  Variable2
  # ctry1_time1
  # ctry1_time2
  # ...
  # ctry2_time1
  # ctry2_time2
  # ...
  # tstep is the number of time points
  # panel_unstack produces a 3-dimensional array out of that
 
  bigT=nrow(stackeddata);K=ncol(stackeddata);
  if (is.null(tstep)) tstep=bigT
  X1=aperm(array(as.vector(t(as.matrix(stackeddata))),dim=c(K,tstep,bigT/tstep)), perm=c(2,1,3))
  try(dimnames(X1)[[1]] <-  unique(sapply(strsplit(rownames(stackeddata),"_"),
function(x) x[[2]])), silent=TRUE)
  try(dimnames(X1)[[2]] <-  colnames(stackeddata), silent=TRUE)
  try(dimnames(X1)[[3]] <-  unique(sapply(strsplit(rownames(stackeddata),"_"),
function(x) x[[1]])), silent=TRUE)
  return(X1)
}

panel_stack = function(array3d) {
  x1= apply(array3d,2,rbind)
  try(rownames(x1) <-  as.vector(sapply(dimnames(array3d)[[3]],
FUN=function(x) paste(x, dimnames(array3d)[[1]], sep="_"))), silent=TRUE)
  return(as.data.frame(x1))
}

demean = function(x, margin) {
 #x is an array
 #margin is the dimension along which should be demeaned
 if (!is.array(x)) stop("x must be an array/matrix")
 otherdims=(1:length(dim(x)))[-margin]
  sweep(x,otherdims,apply(x,otherdims,mean))
}

@

\section{Bayesian Model Selection}

<<Preparation, echo=TRUE, eval=FALSE, keep.source=FALSE>>=

#----------------------------------------------------- Data Preparation -----------------------------------------------------#

data_new <- data[,c(33, 3:6, 8, 10:32)] #reduce data set and change columns - removes bits, dist, iso2c, year and indices

#Use the functions 
array <- panel_unstack(data_new, tstep=13)
time <- panel_stack(demean(array,3))
country <- panel_stack(demean(array,1))

@

<<BMS-Results, echo=TRUE, eval=FALSE, keep.source=FALSE>>=

#BMS - country fixed effects
modelCountry <- bms(country, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T)
saveRDS(modelCountry, "./data/modelCountry")

#BMS - time fixed effects
modelTime <- bms(time, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T)
saveRDS(modelTime, "./data/modelTime")
@
For the country fixed effects model we would include the following variables (because they are above 10\% or 5\% threshold):
\begin{itemize}
\item Population
\item Inflation
\item Surrounding-market potential
\item Real GDP Growth
\item Religious Tensions
\item Foreign Debt as a Percentage of GDP (5\% threshold)
\item Budget Balance as a Percentage of GDP (5\% threshold)
\item Natural Resources (5\% threshold)
\end{itemize}

For the time fixed effects model we would include the following variables (because they are above 10\% and 5\% threshold):
\begin{itemize}
\item Literacy Rate
\item Socioeconomic Conditions
\item GDP
\item Population
\item Real GDP Growth
\end{itemize}

For the robustness check we vary the sampling algorithm. Instead of the default birth/death MCMC algorithm we use the reversible jump algorithm which adds a "swap" step to the birth/death algorithm. Thereafter we draw once from every model. In addition to that we check whether already the unique draw from all the models give us some indications on the final results.
<<Robustness Checks I, echo=TRUE, eval=FALSE,keep.source=FALSE>>=

modelCountryEnum <- bms(country, mcmc="enumerate",user.int=T) #population, inflation, gdp_po, GDPGrowth, Religious
saveRDS(modelCountryEnum, "./data/modelCountryEnum")

modelTimeEnum <- bms(time, mcmc="enumerate",user.int=T) #lit, Socio, gdp, population, GDPGrowth
saveRDS(modelTimeEnum, "./data/modelTimeEnum")

modelCountry1 <- bms(country, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T) #population, inflation, gdp_po, GDPGrowth, Religious
saveRDS(modelCountry1, "./data/modelCountry1")

modelTime1 <- bms(time, burn=20000000, iter=30000000, start.value=5, mcmc="rev.jump",user.int=T) #lit, Socio, gdp, population, GDPGrowth
saveRDS(modelTime1, "./data/modelTime1")

@
We clearly see that the results do not depend on the algorithm, which is clearly a good sign. 


We delete all variables with PIP lower than 1\% and draw again. This shows us how sensitive the results are regarding the data set.
<<Robustness Checks II, echo=TRUE, eval=FALSE,keep.source=FALSE>>=

#Country fixed effects
data_new1 <- data_new[,c(1:7, 9:15, 18:19, 21:26, 28:29)]
array1 <- panel_unstack(data_new1, tstep=13)
country1 <- panel_stack(demean(array1,1))

modelC <- bms(country1, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T) #population, inflation, gdp_po, GDPGrowth, Religious, ForDebt
saveRDS(modelC, "./data/modelC")


#Time fixed effects
data_new2 <- data_new[,c(1:9, 11:12, 14:29)]
array2 <- panel_unstack(data_new2, tstep=13)
time1 <- panel_stack(demean(array2,3))

modelT <- bms(time1, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T) #lit, socio, gdp, gdpgrowth, population, 
saveRDS(modelT, "./data/modelT")

@
For the country fixed effects model we would include the following variables (because they are above 10\% / 5\% threshold):
\begin{itemize}
\item Population
\item Inflation
\item Surrounding-market potential
\item Real GDP Growth
\item Religious Tensions
\item Foreign Debt as a Percentage of GDP (5\% threshold)
\item Budget Balance as a Percentage of GDP (5\% threshold)
\item Natural Resources (5\% threshold)
\end{itemize}

For the time fixed effects model we would include the following variables (because they are above 10\% and 5\% threshold):
\begin{itemize}
\item Literacy Rate
\item Socioeconomic Conditions
\item GDP
\item Population
\item Real GDP Growth
\item Investment Profile (5\% threshold)
\end{itemize}


\subsection{BMS - sub-sampling}

In addition, we check how sensitive the algorithm is to the given data set. Therefore we conduct the following multiple-steps process:
\begin{enumerate}
    \item Firstly, we create three sub-samples where we include all variables from one sub-index plus the two remaining full sub-indices, e.g. all variables from the economic risk index plus the variable 'financial risk and 'political risk'. Once we have obtained the results from three million draws of the MC3 sampler, after a burn-in phase of two million iterations we exclude the least likely variables, i.e. variables with PIP below 2\% and below 3\%, from the big sample. 
    \item With this reduction we are able to decrease the model space and sample several times out of the most likely models. 
\end{enumerate}
In general, the results should not vary tremendeously between the initial sampling and the reduced data set sampling as only the least likely variables have been excluded from the sample.\\

We now proceed to the robustness checks with the sub-samples. For the political risk indicators we keep the 20 million burn-ins and 30 million iterations, for the other two indicators we can reduce them because the model space is significant smaller and thus we don't need that many draws for the other two sub-samples.
<<Robustness Checks III, echo=TRUE, eval=FALSE,keep.source=FALSE>>=
data_test <- data[,c(33, 3:6, 8, 32, 10:31, 34:36)] #reduce data set and change columns - removes bits, dist, iso2c, year


#Single indices from pol
data_test_pol <- data_test[,c(1:19, 31:32)] 
dat.array_pol <- panel_unstack(data_test_pol, tstep=13)

#timeDat
timeDat_pol <- panel_stack(demean(dat.array_pol,3))
modelTd1 <- bms(timeDat_pol, burn=20000000, iter=30000000, mcmc="bd",user.int=T) #lit, Socio, gdp, population
saveRDS(modelTd1, "./data/modelTd1")
modelTd2 <- bms(timeDat_pol, burn=20000000, iter=30000000, mcmc="rev.jump",user.int=T) #lit, Socio, gdp, population
saveRDS(modelTd2, "./data/modelTd2")
#remove everything below 1%: none
#remove everything below 2%: Internal, Military, Government, External, Bureaucracy, Corruption, Religious
#remove everything below 3%: Internal, Military, Government, External, Bureaucracy, Corruption, Religious 
#remove everything below 5%: Internal, Military, Government, External, Bureaucracy, Corruption, Religious, Democratic, Law, Investment

#countryDat
countryDat_pol <- panel_stack(demean(dat.array_pol,1))
modelCd1 <- bms(countryDat_pol, burn=20000000, iter=30000000, mcmc="bd",user.int=T) #population, gdp_po, Religious
saveRDS(modelCd1, "./data/modelCd1")
modelCd2 <- bms(countryDat_pol, burn=20000000, iter=30000000, mcmc="rev.jump",user.int=T) #population, gdp_po, Religious
saveRDS(modelCd2, "./data/modelCd2")
#remove everything below 1%: none
#remove everything below 2%: Democratic, Socioeconomic, Investment, Ethnic, Military
#remove everything below 3%: Democratic, Socioeconomic, Investment, Ethnic, Military, External, Internal, Bureaucracy
#remove everything below 5%: Democratic, Socioeconomic, Investment, Ethnic, Military, External, Internal, Bureaucracy, Government


#Single indices from fin
data_test_fin <- data_test[,c(1:7, 20:24, 30, 32)] 
dat.array_fin <- panel_unstack(data_test_fin, tstep=13)

#timeDat
timeDat_fin <- panel_stack(demean(dat.array_fin,3))
modelTd3 <- bms(timeDat_fin, burn=2000000, iter=3000000, mcmc="bd",user.int=T) #lit, population, pol, gdp, reso, IntLiq
saveRDS(modelTd3, "./data/modelTd3")
modelTd4 <- bms(timeDat_fin, burn=2000000, iter=3000000, mcmc="rev.jump",user.int=T) #lit, population, pol, gdp, reso, IntLiq
saveRDS(modelTd4, "./data/modelTd4")
#remove everything below 1%: none
#remove everything below 2%: none
#remove everything below 3%: CAXGS, DebtServ, XStab
#remove everything below 5%: CAXGS, DebtServ, XStab, ForDebt

#countryDat
countryDat_fin <- panel_stack(demean(dat.array_fin,1))
modelCd3 <- bms(countryDat_fin, burn=2000000, iter=3000000, mcmc="bd",user.int=T) #population, gdp_po, XRStab, ForDebt
saveRDS(modelCd3, "./data/modelCd3")
modelCd4 <- bms(countryDat_fin, burn=2000000, iter=3000000, mcmc="rev.jump",user.int=T) #population, gdp_po, XRStab, ForDebt
saveRDS(modelCd4, "./data/modelCd4")
#remove everything below 1%: none
#remove everything below 2%: DebtServ, CAXGS
#remove everything below 3%: DebtServ, CAXGS, IntLiq
#remove everything below 5%: DebtServ, CAXGS, IntLiq 


#Single indices from eco
data_test_eco <- data_test[,c(1:7, 25:31)] 
dat.array_eco <- panel_unstack(data_test_eco, tstep=13)

timeDat_eco <- panel_stack(demean(dat.array_eco,3))
modelTd5 <- bms(timeDat_eco, burn=2000000, iter=3000000, mcmc="bd",user.int=T) #lit, pol, population, gdp, GDPGrowth
saveRDS(modelTd5, "./data/modelTd5")
modelTd6 <- bms(timeDat_eco, burn=2000000, iter=3000000, mcmc="rev.jump",user.int=T) #lit, pol, population, gdp, GDPGrowth, reso
saveRDS(modelTd6, "./data/modelTd6")
#remove everything below 1%: none
#remove everything below 2%: none
#remove everything below 3%: none
#remove everything below 5%: Inflation, BudBal, CACC

countryDat_eco <- panel_stack(demean(dat.array_eco,1))
modelCd5 <- bms(countryDat_eco, burn=2000000, iter=3000000, mcmc="bd",user.int=T) #population, Inflation, gdp_po, GDPGrowth, reso, BudBal
saveRDS(modelCd5, "./data/modelCd5")
modelCd6 <- bms(countryDat_eco, burn=2000000, iter=3000000, mcmc="rev.jump",user.int=T) #population, Inflation, gdp_po, GDPGrwoth, reso, BudBal
saveRDS(modelCd6, "./data/modelCd6")
#remove everything below 1%: none
#remove everything below 2%: none
#remove everything below 3%: GDPHead
#remove everything below 5%: GDPHead, CACC

@

<<Robustness Checks IV, echo=TRUE, eval=FALSE,keep.source=FALSE>>=
data_test <- data[,c(33, 3:6, 8, 32, 10:31, 34:36)] #reduce data set and change columns - removes bits, dist, iso2c, year

#Time fixed effects
#remove all below 2%: Internal, Military, Government, External, Bureaucracy, Corruption, Religious
data_test_time <- data_test[,c(1:7, 9:10, 16:18, 20:29)]

modelTime4 <- bms(data_test_time, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T) #lit, gdp, socio, gdpgrowth, invest, debtserv, CACC
saveRDS(modelTime4, "./data/modelTime4")
modelTime5 <- bms(data_test_time, burn=20000000, iter=30000000, start.value=5, mcmc="rev.jump",user.int=T)
saveRDS(modelTime5, "./data/modelTime5")


#Country fixed effects
#remove all below 2%: Democratic, Socioeconomic, Investment, Ethnic, Military, DebtServ, CAXGS
data_test_country <- data_test[,c(1:8, 11:13, 15:16, 19:20, 22:29)]

modelCountry4 <- bms(data_test_country, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T)
saveRDS(modelCountry4, "./data/modelCountry4")
modelCountry5 <- bms(data_test_country, burn=20000000, iter=30000000, start.value=5, mcmc="rev.jump",user.int=T)
saveRDS(modelCountry5, "./data/modelCountry5")
@

<<Robustness Checks V, echo=FALSE, eval=FALSE,keep.source=FALSE>>=
data_test <- data[,c(33, 3:6, 8, 32, 10:31, 34:36)] #reduce data set and change columns - removes bits, dist, iso2c, year

#Time fixed effects
#remove all below 3%: Internal, Military, Government, External, Bureaucracy, Corruption, Religious, CAXGS, DebtServ, XStab
data_test_time <- data_test[,c(1:7, 9:10, 16:18, 22:23, 25:29)]

modelTime2 <- bms(data_test_time, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T)
saveRDS(modelTime2, "./data/modelTime2")
modelTime3 <- bms(data_test_time, burn=20000000, iter=30000000, start.value=5, mcmc="rev.jump",user.int=T)
saveRDS(modelTime3, "./data/modelTime3")


#Country fixed effects
#remove all below 3%: Democratic, Socioeconomic, Investment, Ethnic, Military, External, Internal, Bureaucracy, DebtServ, CAXGS, IntLiq, GDPHead
data_test_country <- data_test[,c(1:8, 13, 15:16, 22, 24:27, 29)]

modelCountry2 <- bms(data_test_country, burn=20000000, iter=30000000, start.value=5, mcmc="bd",user.int=T)
saveRDS(modelCountry2, "./data/modelCountry2")
modelCountry3 <- bms(data_test_country, burn=20000000, iter=30000000, start.value=5, mcmc="rev.jump",user.int=T)
saveRDS(modelCountry3, "./data/modelCountry3")
@
To conclude the results did not change tremendously but to some extend. 


<<Country Fixed Effects, echo=FALSE, eval=FALSE,keep.source=FALSE>>=
#For the country fixed effects model we yield the following:
#log or without log?
fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(dist)+log(gdp_po)+reso+bits+lit+data$`Religious Tensions`+Inflation+GDPGrowth+ForDebt+BudBal
b <- plm(fm, data, effect="individual")

fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(dist)+log(gdp_po)+reso+bits+lit+ihs(data$`Religious Tensions`)+ihs(Inflation)+ihs(GDPGrowth)+ihs(ForDebt)+log(BudBal)
b1 <- plm(fm, data, effect="individual")

ifelse(r.squared(b, dfcor=TRUE) > r.squared(b1, dfcor=TRUE), "without log", "with log")
#Result: With log
AIC_plm(b)
AIC_plm(b1)
#Unfortunately the pml-packages doesn't come with the AIC and log-likelifood function. Therefore we used the adjustd R-Squared instead.
@


<<Time Fixed Effects, echo=FALSE, eval=FALSE,keep.source=FALSE>>=
#For the fime fixed effects model we yield the following:
#log or without log?
fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(dist)+log(gdp_po)+reso+bits+lit+data$`Socioeconomic Conditions`+GDPGrowth+data$`Investment Profile`
c <- plm(fm, data, effect="time")

fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(dist)+log(gdp_po)+reso+bits+lit+log(data$`Socioeconomic Conditions`)+ihs(GDPGrowth)+log(data$`Investment Profile`)
c1 <- plm(fm, data, effect="time")

ifelse(r.squared(c, dfcor=TRUE) > r.squared(c1, dfcor=TRUE), "without log", "with log")
#Result: Without log
AIC_plm(c)
AIC_plm(c1)
@


<<Comparison BMS-Models, echo=FALSE, eval=FALSE,keep.source=FALSE>>=
fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(dist)+log(gdp_po)+lit+reso+bits+data$`Religious Tensions`+Inflation+GDPGrowth+ForDebt+BudBal
country.fixed <- plm(fm, data, effect="individual")

fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(dist)+log(gdp_po)+lit+reso+bits+data$`Socioeconomic Conditions`+GDPGrowth+data$`Investment Profile`
time.fixed <- plm(fm, data, effect="time")

stargazer(country.fixed, time.fixed, no.space=TRUE, title="Country and Time Fixed Effects Model after BMS", dep.var.caption="", column.labels=c("Country Fixed Effects", "Time Fixed Effects"), covariate.labels=c("Log Population","Log GDP","Log Trade costs","Log Distance to China","Log Surrounding-market potential","Literacy rate","Natural resources","Bilateral trade agreement","Religious Tensions","Annual Inflation Rate","Real GDP Growth","Foreign Debt as Percentage of GDP","Budget Balance as a Percentage of GDP","Constant"))



fm <- ihs(value) ~ log(population)+log(gdp)+log(tradec)+log(gdp_po)+lit+reso+bits+data$`Religious Tensions`+Inflation+GDPGrowth+ForDebt+BudBal+iso2c
spreml.country <- spreml(fm, data, w=W.list.k, lag=TRUE, errors="sem")

fm <- ihs(value) ~ log(population)+log(tradec)+log(gdp_po)+lit+reso+bits+data$`Socioeconomic Conditions`+GDPGrowth+data$`Investment Profile`+year
spreml.time <- spreml(fm, data, w=W.list.k, lag=TRUE, errors="sem")

summary(spreml.country)
summary(spreml.time)
AIC_plm(spreml.time)
AIC.spreml(spreml.country)
-2*spreml.time$logLik+2*(length(spreml.time$coefficients)+2)
-2*spreml.country$logLik+2*(length(spreml.country$coefficients)+2)
@


\end{document}